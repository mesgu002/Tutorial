// GitTutorial.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <fstream>
#include <iostream>
#include <stdio.h>  /* defines FILENAME_MAX */
#ifdef __GNUC__
	#include <unistd.h>
	#define GetCurrentDir getcwd
#else
	#include <direct.h>
	#define GetCurrentDir _getcwd
 #endif

using namespace std;

bool file_exists(const char *fileName)
{
	std::ifstream infile(fileName);
	return infile.good();
}

int main()
{
	fstream fs;

	char cCurrentPath[FILENAME_MAX];

	if (!GetCurrentDir(cCurrentPath, sizeof(cCurrentPath)))
	{
		return errno;
	}

	cCurrentPath[sizeof(cCurrentPath) - 1] = '\0'; /* not really required */


	if (!file_exists("main.cpp"))
	{
		cout << "0" << endl;
		fs.open("main.cpp", fstream::out);
		fs <<
			"#include <iostream> \n" <<
			"\n" <<
			"using namespace std; \n" <<
			"\n" <<
			"int main()\n" <<
			"{\n" <<
			"for (int i = 0; i < 100; i++)\n" <<
			"{\n" <<
			"	cout << i; \n" <<
			"	if (i % 3 == 0 || i % 5 == 0)\n" <<
			"	{\n" <<
			"		//This line outputs Fizz whenever the number is divisible by 3.\n" <<
			"		if (i % 3 == 0) { cout << \"Fizz\"; }\n" <<
			"		//This line outputs Buzz whenever the number is divisible by 5.\n" <<
			"		if (i % 5 == 0) { cout << \"Buzz\"; }\n" <<
			"	}\n" <<
			"		cout << endl; \n" <<
			"}\n" <<
			"	return 0; \n" <<
			"}\n";
		fs.close();
	}
	else if (!file_exists("bloat.mark"))
	{
		cout << "1" << endl;
		fs.open("main.cpp", fstream::out | fstream::trunc);
		fs <<
			"#include <iostream> \n" <<
			"\n" <<
			"using namespace std; \n" <<
			"\n" <<
			"int main()\n" <<
			"{\n" <<
			"for (int i = 0; i < 100; i++)\n" <<
			"{\n" <<
			"	cout << i; \n" <<
			"	if (i % 3 == 0 || i % 5 == 0)\n" <<
			"	{\n" <<
			"		if (i % 3 == 0) { cout << \"Fizz\"; }\n" <<
			"		if (i % 5 == 0) { cout << \"Buzz\"; }\n" <<
			"	}\n" <<
			"		cout << endl; \n" <<
			"}\n" <<
			"	return 0; \n" <<
			"}\n";
		fs.close();

		fs.open("bloat.mark", fstream::out | fstream::trunc);
		fs <<
			"This is a file we want to keep on our local machine, but we don't want to have saved in our repository.\n" <<
			"Files like these that C++ programs often have are a.out or class.o files. We want to keep them around while\n" <<
			"We are working on them, but we don't NEED them to be saved. We can always recreate them.\n" <<
			"For now, let's assume that this file is something generated by our code that we would like to keep around,\n" <<
			"so we don't want to delete it. Instead, we want our source control to ignore this file.\n";
		fs.close();
	}
	else if (!file_exists("bloat2.mark"))
	{
		cout << "2" << endl;
		fs.open("main.cpp", fstream::out | fstream::trunc);
		fs <<
			"#include <iostream> \n" <<
			"\n" <<
			"using namespace std; \n" <<
			"\n" <<
			"int main()\n" <<
			"{\n" <<
			"for (int i = 0; i < 100; i++)\n" <<
			"{\n" <<
			"	cout << i; \n" <<
			"	if (i % 3 == 0 || i % 5 == 0)\n" <<
			"	{\n" <<
			"		if (i % 3 == 0) { cout << \"Fizz\"; }\n" <<
			"		if (i % 5 == 0) { cout << \"Bozz\"; }\n" <<
			"		if (i % 7 == 0) { cout << \"Blorg\"; }\n" <<
			"	}\n" <<
			"		cout << endl; \n" <<
			"}\n" <<
			"	return 0; \n" <<
			"}\n";
		fs.close();
		fs.open("bloat.mark", fstream::out | fstream::trunc);
		fs <<
			"Here, we make a change to bloat.mark, a file we want to be ignored by git's source control.\n" <<
			"Notice that even though this file is completely changed, it does not show up in our list of changes.\n" <<
			"This allows us to make as many changes to these files and as often as we would like without them making\n" <<
			"the size of our repository bigger. If we did not ignore this file and continued to commit the changes\n" <<
			"the size of our repository will grow and git will become more sluggish when syncing with the remote repo.\n";
		fs.close();
		fs.open("bloat2.mark", fstream::out | fstream::trunc);
		fs <<
			"Here we see that we have created another bloat file, so we'll have to ignore this one too. The good thing is\n" <<
			"that its file extension (.mark) is the same as the previous file (bloat.mark). We can simply ignore all of\n" <<
			"these files by right clicking and selecting the option \"Ignore all .mark files.\"\n";
		fs.close();
	}
	else if (!file_exists("bloat3.mark"))
	{
		cout << "3" << endl;
		fs.open("vector3F.h", fstream::out | fstream::trunc);
		fs <<
			"#ifndef __VECTOR3F_H__\n" <<
			"#define __VECTOR3F_H__\n" <<
			"\n" <<
			"class Vector3F\n" <<
			"{\n" <<
			"public:\n" <<
			"	float x;\n" <<
			"	float y;\n" <<
			"	float z;\n" <<
			"\n" <<
			"	Vector3F();\n" <<
			"	Vector3F(const float & nx, const float & ny, const float & nz);\n" <<
			"\n" <<
			"	Vector3F operator+(const Vector3F & rhs) const;\n" <<
			"	Vector3F operator-(const Vector3F & rhs) const;\n" <<
			"	Vector3F operator-() const;\n" <<
			"	Vector3F operator*(float val) const;\n" <<
			"	Vector3F operator/(float val) const;\n" <<
			"	Vector3F operator+=(const Vector3F & rhs);\n" <<
			"	Vector3F operator-=(const Vector3F & rhs);\n" <<
			"	Vector3F operator*=(float val);\n" <<
			"	Vector3F operator/=(float val);\n" <<
			"	Vector3F operator=(const Vector3F & rhs);\n" <<
			"\n" <<
			"	//Vector3F operator=(const Matrix4F & rhs);\n" <<
			"	//float crossProduct(Vector3F a, Vector3F b, Vector3F c){ return (a.  * b.y - a.y * b.x;}\n" <<
			"	Vector3F normalize();\n" <<
			"	float magnitude() const;\n" <<
			"	float sqrMagnitude() const;\n" <<
			"\n" <<
			"	static const Vector3F up;\n" <<
			"	static const Vector3F down;\n" <<
			"	static const Vector3F left;\n" <<
			"	static const Vector3F right;\n" <<
			"	static const Vector3F forward;\n" <<
			"	static const Vector3F back;\n" <<
			"};\n" <<
			"\n" <<
			"#endif\n";
		fs.close();


		fs.open("bloat3.mark", fstream::out | fstream::trunc);
		fs << "Cheeky way to keep the coding this tutorial simple.\n";
		fs.close();
	}
	else if (!file_exists("bloat4.mark"))
	{
		cout << "4" << endl;
		fs.open("main.cpp", fstream::out | fstream::trunc);
		fs <<
			"#include <iostream> \n" <<
			"\n" <<
			"using namespace std; \n" <<
			"\n" <<
			"int main()\n" <<
			"{\n" <<
			"int total = 0;\n" <<
			"//Calculates the sum i = [1, 100], i^2 \n" <<
			"for (int i = 0; i < 100; i++)\n" <<
			"{\n" <<
			"	total += i*i;\n" <<
			"}\n" <<
			"	cout << \"The total is \" << i << \".\\n\"; \n" <<
			"	return 0; \n" <<
			"}\n";
		fs.close();
		fs.open("bloat4.mark", fstream::out | fstream::trunc);
		fs << "\n";
		fs.close();
	}
	else if (!file_exists("bloat5.mark"))
	{
		cout << "5" << endl;
		fs.open("main.cpp", fstream::out | fstream::trunc);
		fs <<
			"#include <iostream> \n" <<
			"\n" <<
			"using namespace std; \n" <<
			"\n" <<
			"int main(int argc, char* argv[])\n" <<
			"{\n" <<
			"int total = 0;\n" <<
			"//Calculates the sum i = [argv[0], argv[1]], i^2 \n" <<
			"for (int i = argv[0]; i < argv[1]; i++)\n" <<
			"{\n" <<
			"	total += i*i;\n" <<
			"}\n" <<
			"	cout << \"The total is \" << i << \".\\n\"; \n" <<
			"	return 0; \n" <<
			"}\n";
		fs.close();
		fs.open("bloat5.mark", fstream::out | fstream::trunc);
		fs << "\n";
		fs.close();
	}
	else if (!file_exists("bloat6.mark"))
	{
		cout << "6" << endl;
		fs.open("main.cpp", fstream::out | fstream::trunc);
		fs <<
			"#include <iostream> \n" <<
			"\n" <<
			"using namespace std; \n" <<
			"\n" <<
			"int main(int argc, char* argv[])\n" <<
			"{\n" <<
			"long total = 0;\n" <<
			"if(argc != 2) {return -1;}\n" <<
			"for (int i = argv[1]; i < argv[0]; i++)\n" <<
			"{\n" <<
			"	total += i*i;\n" <<
			"}\n" <<
			"	cout << \"The total is \" << i << \".\\n\"; \n" <<
			"	return 0; \n" <<
			"}\n";
		fs.close();
		fs.open("bloat6.mark", fstream::out | fstream::trunc);
		fs << "\n";
		fs.close();
	}
	cout << "Please close this window.\n";
	int x;
	cin >> x;
    return 0;
}
